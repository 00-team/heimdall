/* // use crate::config::Config;
// use crate::docs::{doc_add_prefix, ApiDoc};
use actix_web::{
    get, middleware,
    web::{Data, ServiceConfig},
    App, HttpResponse, HttpServer, Responder,
};
// use config::config;
use sqlx::{Pool, Sqlite, SqlitePool};

pub struct AppState {
    pub sql: Pool<Sqlite>,
}

#[get("/")]
async fn index() -> impl Responder {
    HttpResponse::Ok().body("hi")
}

fn config_app(app: &mut ServiceConfig) {
    if cfg!(debug_assertions) {
        // app.service(af::Files::new("/static", "static"));
        // app.service(af::Files::new("/admin-assets", "admin/dist/admin-assets"));
        // app.service(af::Files::new("/record", Config::RECORD_DIR));
        // app.service(redirect_simrugh_record);
        // app.service(redirect_simrugh_ssrs);
    }

    app.service(index);
    // app.service(
    //     scope("/api")
    //         .service(api::user::router())
    //         .service(api::verification::verification)
    //         .service(
    //             scope("/admin")
    //                 .service(admin::product::router())
    //                 .service(admin::product_tag::router()),
    //         ),
    // );
    // app.service(web::router());
} */

use std::os::unix::net::UnixListener;

#[cfg(unix)]
// #[actix_web::main]
fn main() -> std::io::Result<()> {

    // dotenvy::from_path(".env").expect("could not read .env file");
    // pretty_env_logger::init();
    //
    // let server = UnixListener
    //
    // // let _ = std::fs::create_dir(Config::RECORD_DIR);
    // let pool = SqlitePool::connect("sqlite://main.db").await.unwrap();
    //
    // let server = HttpServer::new(move || {
    //     App::new()
    //         .wrap(middleware::Logger::new("%s %r %Ts"))
    //         .app_data(Data::new(AppState { sql: pool.clone() }))
    //         .configure(config_app)
    // });
    //
    // let server = if cfg!(debug_assertions) {
    //     server.bind(("127.0.0.1", 7090)).unwrap()
    // } else {
    //     use std::os::unix::fs::PermissionsExt;
    //     const PATH: &'static str = "/usr/share/nginx/sockets/heimdall.sock";
    //     let server = server.bind_uds(PATH).unwrap();
    //     std::fs::set_permissions(PATH, std::fs::Permissions::from_mode(0o777))?;
    //     server
    // };
    //
    // server.run().await
}
